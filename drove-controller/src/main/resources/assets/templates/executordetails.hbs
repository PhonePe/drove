{{#partial "content"}}
    <section>
        <div class="row">
            <div class="col">
                <table class="table table-bordered" id="executorSummary">
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Hostname</th>
                        <th>Port</th>
                        <th>Used CPU Cores</th>
                        <th>Free CPU Cores</th>
                        <th>Uses Memory</th>
                        <th>Free Memory</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </section>
    <section>
        <div class="row">
            <div class="col">
                <table class="table table-bordered" id="instances">
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>App Id</th>
                        <th>Port</th>
                        <th>Cores</th>
                        <th>Memory</th>
                        <th>State</th>
                        <th>Log Stream</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </section>
{{/partial}}

{{#partial "page_js"}}
    var summary = $('#executorSummary').DataTable({
        'processing' : true,
        'paging': false,
        'searching' : false,
        'ordering' : false,
        'info' : false,
        'columnDefs': [ {'className': 'nowrap', 'targets': '_all'} ],

        'columns' : [
            { 'data' : 'executorId' },
            { 'data' : 'hostname' },
            { 'data' : 'port' },
            { 'data' : 'usedCores' },
            { 'data' : 'freeCores' },
            { 'data' : 'usedMemory' },
            { 'data' : 'freeMemory' }
        ]
    });
    var ii = $('#instances').DataTable({
        'processing' : true,
        'paging': false,
        'info' : false,
        'columns' : [
                { 'data' : 'instanceId' },
                { 'data' : 'appId' },
                { 'data' : 'ports' },
                { 'data' : 'usedCores' },
                { 'data' : 'usedMemory' },
                { 'data' : 'state' },
                { 'data' : 'logStream' }
            ]
        });
    function loadExecutorSnapshot() {
        $.get('/apis/v1/cluster/executors/{{executorId}}',
            function(res) {
                if(!res || !res.data) {
                    console.error("No data");
                }
                var data = res.data;
                console.log(JSON.stringify(data));
                var esum = {};
                esum['executorId'] = data.state.executorId;
                esum['hostname'] = data.hostname;
                esum['port'] = data.port;
                esum['port'] = data.port;
                var uc = data.state.cpus.usedCores;
                esum['usedCores'] = Object.values(uc)
                                        .map(v => v.length)
                                        .reduce((acc, v) => acc + v, 0);
                var fc = data.state.cpus.freeCores;
                esum['freeCores'] = Object.values(fc)
                                        .map(v => v.length)
                                        .reduce((acc, v) => acc + v, 0);
                esum['usedMemory'] = Object.values(data.state.memory.usedMemory)
                                        .reduce((acc, v) => acc + v, 0);
                esum['freeMemory'] = Object.values(data.state.memory.freeMemory)
                                        .reduce((acc, v) => acc + v, 0);
                summary.clear();
                summary.rows.add([esum]).draw();

                var instances = res.data.instances;
                instances.forEach( (info, i) => {
                    if(info.localInfo) {
                        info['hostname'] = info.localInfo.hostname;
                        info['ports'] = Object.keys(info.localInfo.ports)
                            .map(key => '<b>' + key + ':</b> ' + info.localInfo.ports[key].hostPort)
                        .join(",");
                    }
                    else {
                        info['hostname'] = '';
                        info['ports'] = '';
                    }
                    info.resources.forEach((r,i) => {
                        if(r.type === 'CPU') {
                            info['usedCores'] = Object.values(r.cores).map(v => v.length).reduce((s,l) => s + l, 0);
                        }
                        if(r.type === 'MEMORY') {
                            info['usedMemory'] = Object.values(r.memoryInMB).reduce((s,m) => s + m, 0);
                        }
                    });

                    info['logStream'] = "TODO";
                });
                ii.clear();
                ii.rows.add(instances).draw();
            });
    }


    loadExecutorSnapshot();

    setInterval(() => {
        loadExecutorSnapshot();
    }, 3000);

{{/partial}}
{{> common/base}}
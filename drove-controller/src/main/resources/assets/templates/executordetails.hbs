{{#partial "content"}}
    <section>
        <div class="row">
            <script type="text/template" data-template="executorSummary">
                <table  class="table table-bordered" >
                    <tr>
                        <th class="text-nowrap">ID</th>
                        <td class="fw-bold">${executorId}</td>
                    </tr>
                    <tr>
                        <th class="text-nowrap">Status</th>
                        <td>${status}</td>
                    </tr>
                    <tr>
                        <th class="text-nowrap">Hostname</th>
                        <td>${hostname}</td>
                    </tr>
                    <tr>
                        <th class="text-nowrap">Port</th>
                        <td>${port}</td>
                    </tr>
                    <tr>
                        <th class="text-nowrap">Transport Type</th>
                        <td>${transportType}</td>
                    </tr>
                    <tr>
                        <th class="text-nowrap">CPU</th>
                        <td>${cpuUsage}</td>
                    </tr>
                    <tr>
                        <th class="text-nowrap">Memory</th>
                        <td>${memoryUsage}</td>
                    </tr>
                    <tr>
                        <th class="text-wrap">Tags</th>
                        <td>${tags}</td>
                    </tr>

                </table>
            </script>

            <script type="text/template" data-template="numaNodeTemplate">
                <div class="col-12 col-lg-6">
                    <div class="card me-2 mb-2">
                        <h6 class="card-title m-2 text-center">
                            Node ${nodeId}
                        </h6>
                        <div class="card-body text-center">
                            ${cores}
                        </div>
                        <div class="card-footer">
                            ${memory}
                        </div>
                    </div>
                </div>
            </script>

            <div class="col-12 col-md-4 mb-2" id="executorSummary">
            </div>
            <div class="col-12 col-md-6">
                <div class="row">
                    <div class="col">
                        <h5 class="fw-bold">NUMA Node Status</h5>
                        <small class="mb-1" style="font-size: x-small">
                            Core status indicator:
                            <span class="core-display text-danger" style="font-size: x-small">Used</span>
                            <span class="core-display text-success" style="font-size: x-small">Unused</span>
                        </small>
                    </div>
                </div>
                <div class="row" id="cpuStatus">
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col"><h4 class="fw-bold">Application Instances</h4></div>
                </div>
                <div class="row">
                    <div class="col">
                        <table class="table table-bordered" id="instances">
                            <thead>
                            <tr>
                                <th>Instance</th>
                                <th>App Id</th>
                                <th>Port</th>
                                <th>Cores</th>
                                <th>Memory</th>
                                <th>Current Age</th>
                                <th>Created</th>
                                <th>Last Updated</th>
                                <th>State</th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col"><h4 class="fw-bold">Tasks</h4></div>
                </div>
                <div class="row">
                    <div class="col">
                        <table class="table table-bordered" id="tasks">
                            <thead>
                            <tr>
                                <th>Instance</th>
                                <th>Source App</th>
                                <th>Task ID</th>
                                <th>Cores</th>
                                <th>Memory</th>
                                <th>Current Age</th>
                                <th>Created</th>
                                <th>Last Updated</th>
                                <th>State</th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col"><h4 class="fw-bold">Local Service Instances</h4></div>
                </div>
                <div class="row">
                    <div class="col">
                        <table class="table table-bordered" id="service-instances">
                            <thead>
                            <tr>
                                <th class="nowrap-contents">Instance</th>
                                <th>Service Id</th>
                                <th>Port</th>
                                <th>Cores</th>
                                <th>Memory</th>
                                <th>Current Age</th>
                                <th>Created</th>
                                <th>Last Updated</th>
                                <th>State</th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
{{/partial}}

{{#partial "page_js"}}

    const summary = $('#executorSummary');

    function executorDataTransformerForAppInstances(res, instances) {
        if(!res || !res.data) {
            console.error("No data");
            return [];
        }
        return executorDataTransformer(res, res.data.instances || []);
    }

    function executorDataTransformerForServiceInstances(res, instances) {
        if(!res || !res.data) {
            console.error("No data");
            return [];
        }
        return executorDataTransformer(res, res.data.serviceInstances || []);
    }

    function transposeCores(cpus) {
        // Transpose the cores data to be indexed by coreId
        const result = Object.fromEntries(Object.keys(cpus.freeCores)
                                            .map(nodeId => [nodeId, {}]));

        Object.entries(cpus.freeCores)
            .forEach(([nodeId, cores]) => {
                cores.forEach(coreId => result[nodeId][coreId] = "FREE");
            });

        Object.entries(cpus.usedCores)
            .forEach(([nodeId, cores]) => {
                cores.forEach(coreId => result[nodeId][coreId] = "USED");
            });

        return result;
    }

    function transposeMemory(memory) {
        return Object.fromEntries(Object.entries(memory.freeMemory).map(([nodeId, freeMemory]) => [
            nodeId, {
                "TOTAL": freeMemory + (memory.usedMemory[nodeId] || 0),
                "USED": memory.usedMemory[nodeId] || 0
        }
        ]));
    }

    function loadExecutorSnapshot() {
        $.ajax({
            url: '/apis/v1/cluster/executors/{{executorId}}',
            method: 'GET',
            success: function(res) {
                if (res && res.data) {
                    const data = res.data;
                    const ucData = data.state.cpus.usedCores;
                    const usedCores = Object.values(ucData).map(v => v.length).reduce((acc, v) => acc + v, 0);
                    const fcData = data.state.cpus.freeCores;
                    const freeCores = Object.values(fcData).map(v => v.length).reduce((acc, v) => acc + v, 0);
                    const usedMemory = Object.values(data.state.memory.usedMemory).reduce((acc, v) => acc + v, 0);
                    const freeMemory = Object.values(data.state.memory.freeMemory).reduce((acc, v) => acc + v, 0);
                    const executorSummary = {
                        executorId: renderCopyableText(data.state.executorId),
                        hostname: data.hostname,
                        port: data.port,
                        transportType: data.transportType,
                        cpuUsage: renderProgressHtml('progress-with-text', usedCores, 0, freeCores + usedCores,
                                        '{0} of {1} Cores Used'.format(usedCores, freeCores + usedCores)),
                        memoryUsage: renderProgressHtml('progress-with-text', usedMemory, 0, freeMemory + usedMemory,
                                        '{0} of {1} used'.format(bytesToString(usedMemory), bytesToString(freeMemory + usedMemory))),
                        tags: renderTags(data.tags),
                        status: executorStateToHtml(data.executorState)
                    };

                    renderTemplate('executorSummary', [executorSummary], $('#executorSummary'));

                    const numaCpuData = transposeCores(data.state.cpus);
                    const numaMemoryData = transposeMemory(data.state.memory);

                    const cpuStatus = $('#cpuStatus');
                    cpuStatus.empty();
                    Object.entries(numaCpuData).forEach(([nodeId, coreUsage]) => {
                        const badges = Object.entries(coreUsage).map(([coreId, status]) =>
                            '<span class="core-display {0} fw-bold">{1}</span>'.format(status === "FREE" ? "text-success" : "text-danger", coreId)
                        );
                        const cores = badges.join("");
                        const memoryUsage = numaMemoryData[nodeId];
                        const memory = renderProgressHtml('progress-with-text', memoryUsage.USED, 0, memoryUsage.TOTAL, '{0} of {1} used'.format(bytesToString(memoryUsage.USED), bytesToString(memoryUsage.TOTAL)));

                        cpuStatus.append(renderTemplateHtml('numaNodeTemplate', [{ nodeId, cores, memory }]));
                    });
                    ii.clear();
                    ii.rows.add(executorDataTransformer(res, res.data.instances || [])).draw();
                    ti.clear();
                    ti.rows.add(executorDataTransformer(res, res.data.tasks || [])).draw();
                    si.clear();
                    si.rows.add(executorDataTransformer(res, res.data.serviceInstances || [])).draw();
                } else {
                    console.error("No data received");
                }
            },
            error: function(err) {
                console.error("Error fetching executor snapshot", err);
            }
        });
    }

    function executorDataTransformer(res, instances) {
        if(!res || !res.data) {
            console.error("No data");
            return [];
        }
        instances.forEach( (info, i) => {
                if(info.localInfo) {
                    info['hostname'] = info.localInfo.hostname;
                    info['ports'] = Object.keys(info.localInfo.ports)
                        .map(key => '<b>{0}:</b> {1}'.format(key, info.localInfo.ports[key].hostPort))
                        .join(",");
            }
            else {
                info['hostname'] = '';
                info['ports'] = '';
            }
            updateResourceUsage(instances);
        });
        return instances;
    }

    const ii = $('#instances').DataTable({
        'processing' : true,
        'paging': true,
        'info' : false,
        'columns' : [
                {
                    'data' : 'instanceId',
                    'className' : 'text-nowrap',
                    'render' : function(data, type, row, meta) {
                        if(type === "display") {
                            return renderCopyableLink(data,
                                    '/applications/{0}/instances/{1}'.format(row.appId, row.instanceId));
                        }
                        return data;
                    }
                },
                {
                    'data' : 'appId',
                    'render' : function(data, type, row, meta) {
                        return renderCopyableLink(data, '/applications/{0}'.format(data));
                    }
                },
                { 'data' : 'ports' },
                { 'data' : 'usedCores' },
                { 'data' : 'usedMemory', 'render' : tableBytesText },
                { 'data' : 'created', 'render' : tableAgeText },
                { 'data' : 'created', 'render' : tableDateText },
                { 'data' : 'updated', 'render' : tableDateText },
                { 'data' : 'state', 'render' : tableInstanceStateText }
            ],
            'order' : [[5, 'desc']]
    });
    const si = $('#service-instances').DataTable({
        'processing' : true,
        'paging': true,
        'info' : false,
        'columns' : [
                {
                    'data' : 'instanceId',
                    'className' : 'text-nowrap',
                    'render' : function(data, type, row, meta) {
                        if(type === "display") {
                            return renderCopyableLink(data,
                                    '/localservices/{0}/instances/{1}'.format(row.serviceId, row.instanceId));
                        }
                            return data;
                    }
                },
                {
                    'data' : 'serviceId',
                    'render' : function(data, type, row, meta) {
                        return renderCopyableLink(data, '/localservices/{0}'.format(data));
                    }
                },
                { 'data' : 'ports' },
                { 'data' : 'usedCores' },
                { 'data' : 'usedMemory', 'render' : tableBytesText },
                { 'data' : 'created', 'render' : tableAgeText },
                { 'data' : 'created', 'render' : tableDateText },
                { 'data' : 'updated', 'render' : tableDateText },
                { 'data' : 'state', 'render' : tableInstanceStateText }
            ],
            'order' : [[5, 'desc']]
    });

    const ti = $('#tasks').DataTable({
        'processing' : true,
        'paging': true,
        'info' : false,
        'columns' : [
                {
                    'data' : 'instanceId',
                    'className' : 'text-nowrap',
                    'render' : function(data, type, row, meta) {
                        if(type === "display") {
                            return renderCopyableLink(data,
                            '/tasks/{0}/{1}'.format(row.sourceAppName, row.taskId));
                        }
                        return data;
                    }
                },
                { 'data' : 'sourceAppName' },
                { 'data' : 'taskId' },
                { 'data' : 'usedCores' },
                { 'data' : 'usedMemory', 'render' : tableBytesText },
                { 'data' : 'created', 'render' : tableAgeText },
                { 'data' : 'created', 'render' : tableDateText },
                { 'data' : 'updated', 'render' : tableDateText },
                { 'data' : 'state', 'render' : tableTaskStateText }
            ],
            'order' : [[5, 'desc']]
    });

    function renderTags(tags) {
        tags = tags || [];
        var tagStr = "";
        tags.sort();
        for(var i = 0; i < tags.length; i++) {
            tagStr += '<span class="badge bg-secondary text-wrap fw-bold">{0}</span> '.format(tags[i]);
        }
        return tagStr;
    }

    loadExecutorSnapshot();

    setInterval(loadExecutorSnapshot, 3000);

{{/partial}}
{{> common/base}}